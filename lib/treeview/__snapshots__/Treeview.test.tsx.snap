// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test creation of a simple Treeview component (inherit) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="inherit"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="inherit"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              sizing="inherit"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "fUKvCQ",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                sizing="inherit"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl fUKvCQ"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  sizing="inherit"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl fUKvCQ"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    sizing="inherit"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl fUKvCQ"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={null}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="inherit"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl fUKvCQ"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={62}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={62}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={62}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={62}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={62}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={62}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (large) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="large"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="large"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              rowHeight={70}
              sizing="large"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "iMxYSC",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                rowHeight={70}
                sizing="large"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl iMxYSC"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  rowHeight={70}
                  sizing="large"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl iMxYSC"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    rowHeight={70}
                    sizing="large"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl iMxYSC"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={70}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="large"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl iMxYSC"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={70}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={70}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={70}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={70}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={70}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={70}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (medium) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="medium"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="medium"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              sizing="medium"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "fUKvCQ",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                sizing="medium"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl fUKvCQ"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  sizing="medium"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl fUKvCQ"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    sizing="medium"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl fUKvCQ"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={null}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="medium"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl fUKvCQ"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={62}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={62}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={62}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={62}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={62}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={62}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (normal) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="normal"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="normal"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              rowHeight={50}
              sizing="normal"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "fUKvCQ",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                rowHeight={50}
                sizing="normal"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl fUKvCQ"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  rowHeight={50}
                  sizing="normal"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl fUKvCQ"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    rowHeight={50}
                    sizing="normal"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl fUKvCQ"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={50}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="normal"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl fUKvCQ"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={50}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={50}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={50}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={50}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={50}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={50}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (small) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="small"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="small"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              rowHeight={45}
              sizing="small"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "kiIAUj",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                rowHeight={45}
                sizing="small"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl kiIAUj"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  rowHeight={45}
                  sizing="small"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl kiIAUj"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    rowHeight={45}
                    sizing="small"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl kiIAUj"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={45}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="small"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl kiIAUj"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={45}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={45}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={45}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={45}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={45}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={45}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (xlarge) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="xlarge"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="xlarge"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              rowHeight={80}
              sizing="xlarge"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "jdBAkp",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                rowHeight={80}
                sizing="xlarge"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl jdBAkp"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  rowHeight={80}
                  sizing="xlarge"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl jdBAkp"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    rowHeight={80}
                    sizing="xlarge"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl jdBAkp"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={80}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="xlarge"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl jdBAkp"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={80}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={80}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={80}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={80}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={80}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={80}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (xsmall) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="xsmall"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="xsmall"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              rowHeight={45}
              sizing="xsmall"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "jxzAPa",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                rowHeight={45}
                sizing="xsmall"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl jxzAPa"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  rowHeight={45}
                  sizing="xsmall"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl jxzAPa"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    rowHeight={45}
                    sizing="xsmall"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl jxzAPa"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={45}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="xsmall"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl jxzAPa"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={45}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={45}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={45}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={45}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={45}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={45}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (xxlarge) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="xxlarge"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="xxlarge"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              rowHeight={90}
              sizing="xxlarge"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "hSgtyF",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                rowHeight={90}
                sizing="xxlarge"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl hSgtyF"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  rowHeight={90}
                  sizing="xxlarge"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl hSgtyF"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    rowHeight={90}
                    sizing="xxlarge"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl hSgtyF"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={90}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="xxlarge"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl hSgtyF"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={90}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={90}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={90}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={90}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={90}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={90}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test creation of a simple Treeview component (xxsmall) 1`] = `
<Treeview
  disabled={false}
  err={null}
  errorMessage=""
  height="400px"
  obj="Treeview"
  onChange={[Function]}
  sizing="xxsmall"
  style={Object {}}
  testing={false}
  treeData={
    Array [
      Object {
        "children": Array [
          Object {
            "title": "1.1",
          },
          Object {
            "title": "1.2",
          },
          Object {
            "title": "1.3",
          },
        ],
        "expanded": true,
        "title": "1.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "2.1",
          },
          Object {
            "title": "2.2",
          },
          Object {
            "title": "2.3",
          },
        ],
        "expanded": true,
        "title": "2.0",
      },
      Object {
        "children": Array [
          Object {
            "title": "3.1",
          },
          Object {
            "title": "3.2",
          },
          Object {
            "title": "3.3",
          },
        ],
        "expanded": true,
        "title": "3.0",
      },
    ]
  }
  visible={true}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height="400px"
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Treeview"
    onChange={[Function]}
    onError={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="xxsmall"
    style={Object {}}
    testing={false}
    theme={null}
    tooltip=""
    top=""
    treeData={
      Array [
        Object {
          "children": Array [
            Object {
              "title": "1.1",
            },
            Object {
              "title": "1.2",
            },
            Object {
              "title": "1.3",
            },
          ],
          "expanded": true,
          "title": "1.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "2.1",
            },
            Object {
              "title": "2.2",
            },
            Object {
              "title": "2.3",
            },
          ],
          "expanded": true,
          "title": "2.0",
        },
        Object {
          "children": Array [
            Object {
              "title": "3.1",
            },
            Object {
              "title": "3.2",
            },
            Object {
              "title": "3.3",
            },
          ],
          "expanded": true,
          "title": "3.0",
        },
      ]
    }
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.div
        className="ui-treeview-container"
        height="400px"
        style={Object {}}
      >
        <StyledComponent
          className="ui-treeview-container"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-epnACN",
                "isStatic": false,
                "lastClassName": "hFhUQz",
                "rules": Array [
                  "
	height: ",
                  [Function],
                  ";
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-epnACN",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          height="400px"
          style={Object {}}
        >
          <div
            className="ui-treeview-container sc-epnACN hFhUQz"
            height="400px"
            style={Object {}}
          >
            <Styled(DragDropContext(SortableTreeWithoutDndContext))
              canDrag={true}
              className="ui-treeview"
              disabled={false}
              err={null}
              errorMessage=""
              height="400px"
              obj="Treeview"
              onChange={[Function]}
              rowHeight={45}
              sizing="xxsmall"
              style={Object {}}
              testing={false}
              treeData={
                Array [
                  Object {
                    "children": Array [
                      Object {
                        "title": "1.1",
                      },
                      Object {
                        "title": "1.2",
                      },
                      Object {
                        "title": "1.3",
                      },
                    ],
                    "expanded": true,
                    "title": "1.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "2.1",
                      },
                      Object {
                        "title": "2.2",
                      },
                      Object {
                        "title": "2.3",
                      },
                    ],
                    "expanded": true,
                    "title": "2.0",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "title": "3.1",
                      },
                      Object {
                        "title": "3.2",
                      },
                      Object {
                        "title": "3.3",
                      },
                    ],
                    "expanded": true,
                    "title": "3.0",
                  },
                ]
              }
              visible={true}
            >
              <StyledComponent
                canDrag={true}
                className="ui-treeview"
                disabled={false}
                err={null}
                errorMessage=""
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "DecoratedComponent": [Function],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-iQNlJl",
                      "isStatic": false,
                      "lastClassName": "fxZLcK",
                      "rules": Array [
                        "
	",
                        [Function],
                        "
	",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "Styled(DragDropContext(SortableTreeWithoutDndContext))",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-iQNlJl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                height="400px"
                obj="Treeview"
                onChange={[Function]}
                rowHeight={45}
                sizing="xxsmall"
                style={Object {}}
                testing={false}
                treeData={
                  Array [
                    Object {
                      "children": Array [
                        Object {
                          "title": "1.1",
                        },
                        Object {
                          "title": "1.2",
                        },
                        Object {
                          "title": "1.3",
                        },
                      ],
                      "expanded": true,
                      "title": "1.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "2.1",
                        },
                        Object {
                          "title": "2.2",
                        },
                        Object {
                          "title": "2.3",
                        },
                      ],
                      "expanded": true,
                      "title": "2.0",
                    },
                    Object {
                      "children": Array [
                        Object {
                          "title": "3.1",
                        },
                        Object {
                          "title": "3.2",
                        },
                        Object {
                          "title": "3.3",
                        },
                      ],
                      "expanded": true,
                      "title": "3.0",
                    },
                  ]
                }
                visible={true}
              >
                <DragDropContext(SortableTreeWithoutDndContext)
                  canDrag={true}
                  className="ui-treeview sc-iQNlJl fxZLcK"
                  disabled={false}
                  err={null}
                  errorMessage=""
                  height="400px"
                  obj="Treeview"
                  onChange={[Function]}
                  rowHeight={45}
                  sizing="xxsmall"
                  style={Object {}}
                  testing={false}
                  treeData={
                    Array [
                      Object {
                        "children": Array [
                          Object {
                            "title": "1.1",
                          },
                          Object {
                            "title": "1.2",
                          },
                          Object {
                            "title": "1.3",
                          },
                        ],
                        "expanded": true,
                        "title": "1.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "2.1",
                          },
                          Object {
                            "title": "2.2",
                          },
                          Object {
                            "title": "2.3",
                          },
                        ],
                        "expanded": true,
                        "title": "2.0",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "title": "3.1",
                          },
                          Object {
                            "title": "3.2",
                          },
                          Object {
                            "title": "3.3",
                          },
                        ],
                        "expanded": true,
                        "title": "3.0",
                      },
                    ]
                  }
                  visible={true}
                >
                  <SortableTreeWithoutDndContext
                    canDrag={true}
                    className="ui-treeview sc-iQNlJl fxZLcK"
                    disabled={false}
                    err={null}
                    errorMessage=""
                    height="400px"
                    obj="Treeview"
                    onChange={[Function]}
                    rowHeight={45}
                    sizing="xxsmall"
                    style={Object {}}
                    testing={false}
                    treeData={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "title": "1.1",
                            },
                            Object {
                              "title": "1.2",
                            },
                            Object {
                              "title": "1.3",
                            },
                          ],
                          "expanded": true,
                          "title": "1.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "2.1",
                            },
                            Object {
                              "title": "2.2",
                            },
                            Object {
                              "title": "2.3",
                            },
                          ],
                          "expanded": true,
                          "title": "2.0",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "title": "3.1",
                            },
                            Object {
                              "title": "3.2",
                            },
                            Object {
                              "title": "3.3",
                            },
                          ],
                          "expanded": true,
                          "title": "3.0",
                        },
                      ]
                    }
                    visible={true}
                  >
                    <ReactSortableTree
                      canDrag={true}
                      canDrop={null}
                      canNodeHaveChildren={[Function]}
                      className="ui-treeview sc-iQNlJl fxZLcK"
                      disabled={false}
                      dndType={null}
                      dragDropManager={
                        DragDropManagerImpl {
                          "backend": HTML5Backend {
                            "actions": Object {
                              "beginDrag": [Function],
                              "drop": [Function],
                              "endDrag": [Function],
                              "hover": [Function],
                              "publishDragSource": [Function],
                            },
                            "altKeyPressed": false,
                            "asyncEndDragFrameId": null,
                            "context": Object {},
                            "currentDragSourceNode": null,
                            "currentNativeHandle": null,
                            "currentNativeSource": null,
                            "dragEnterTargetIds": Array [],
                            "dragOverTargetIds": null,
                            "dragStartSourceIds": null,
                            "dropTargetIds": Array [],
                            "endDragIfSourceWasRemovedFromDOM": [Function],
                            "endDragNativeItem": [Function],
                            "enterLeaveCounter": EnterLeaveCounter {
                              "entered": Array [],
                              "isNodeInDocument": [Function],
                            },
                            "getSourceClientOffset": [Function],
                            "handleSelectStart": [Function],
                            "handleTopDragEndCapture": [Function],
                            "handleTopDragEnter": [Function],
                            "handleTopDragEnterCapture": [Function],
                            "handleTopDragLeaveCapture": [Function],
                            "handleTopDragOver": [Function],
                            "handleTopDragOverCapture": [Function],
                            "handleTopDragStart": [Function],
                            "handleTopDragStartCapture": [Function],
                            "handleTopDrop": [Function],
                            "handleTopDropCapture": [Function],
                            "isNodeInDocument": [Function],
                            "monitor": DragDropMonitorImpl {
                              "registry": HandlerRegistryImpl {
                                "dragSources": Map {},
                                "dropTargets": Map {},
                                "pinnedSource": null,
                                "pinnedSourceId": null,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(observable): [Function],
                                },
                                "types": Map {},
                              },
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                            },
                            "mouseMoveTimeoutTimer": null,
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "sourceNodeOptions": Map {},
                            "sourceNodes": Map {},
                            "sourcePreviewNodeOptions": Map {},
                            "sourcePreviewNodes": Map {},
                          },
                          "context": Object {},
                          "handleRefCountChange": [Function],
                          "isSetUp": false,
                          "monitor": DragDropMonitorImpl {
                            "registry": HandlerRegistryImpl {
                              "dragSources": Map {},
                              "dropTargets": Map {},
                              "pinnedSource": null,
                              "pinnedSourceId": null,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(observable): [Function],
                              },
                              "types": Map {},
                            },
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                          },
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          },
                        }
                      }
                      err={null}
                      errorMessage=""
                      generateNodeProps={null}
                      getNodeKey={[Function]}
                      height="400px"
                      innerStyle={Object {}}
                      isVirtualized={true}
                      maxDepth={null}
                      nodeContentRenderer={null}
                      obj="Treeview"
                      onChange={[Function]}
                      onDragStateChanged={[Function]}
                      onMoveNode={[Function]}
                      onVisibilityToggle={[Function]}
                      onlyExpandSearchedNodes={false}
                      placeholderRenderer={null}
                      reactVirtualizedListProps={Object {}}
                      rowDirection="ltr"
                      rowHeight={45}
                      scaffoldBlockPxWidth={null}
                      searchFinishCallback={null}
                      searchFocusOffset={null}
                      searchMethod={null}
                      searchQuery={null}
                      shouldCopyOnOutsideDrop={false}
                      sizing="xxsmall"
                      slideRegionSize={null}
                      style={Object {}}
                      testing={false}
                      theme={Object {}}
                      treeData={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "title": "1.1",
                              },
                              Object {
                                "title": "1.2",
                              },
                              Object {
                                "title": "1.3",
                              },
                            ],
                            "expanded": true,
                            "title": "1.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "2.1",
                              },
                              Object {
                                "title": "2.2",
                              },
                              Object {
                                "title": "2.3",
                              },
                            ],
                            "expanded": true,
                            "title": "2.0",
                          },
                          Object {
                            "children": Array [
                              Object {
                                "title": "3.1",
                              },
                              Object {
                                "title": "3.2",
                              },
                              Object {
                                "title": "3.3",
                              },
                            ],
                            "expanded": true,
                            "title": "3.0",
                          },
                        ]
                      }
                      treeNodeRenderer={null}
                      visible={true}
                    >
                      <div
                        className="rst__tree ui-treeview sc-iQNlJl fxZLcK"
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <Scrolling(List)
                              className="rst__virtualScrollOverride"
                              dragDropManager={
                                DragDropManagerImpl {
                                  "backend": HTML5Backend {
                                    "actions": Object {
                                      "beginDrag": [Function],
                                      "drop": [Function],
                                      "endDrag": [Function],
                                      "hover": [Function],
                                      "publishDragSource": [Function],
                                    },
                                    "altKeyPressed": false,
                                    "asyncEndDragFrameId": null,
                                    "context": Object {},
                                    "currentDragSourceNode": null,
                                    "currentNativeHandle": null,
                                    "currentNativeSource": null,
                                    "dragEnterTargetIds": Array [],
                                    "dragOverTargetIds": null,
                                    "dragStartSourceIds": null,
                                    "dropTargetIds": Array [],
                                    "endDragIfSourceWasRemovedFromDOM": [Function],
                                    "endDragNativeItem": [Function],
                                    "enterLeaveCounter": EnterLeaveCounter {
                                      "entered": Array [],
                                      "isNodeInDocument": [Function],
                                    },
                                    "getSourceClientOffset": [Function],
                                    "handleSelectStart": [Function],
                                    "handleTopDragEndCapture": [Function],
                                    "handleTopDragEnter": [Function],
                                    "handleTopDragEnterCapture": [Function],
                                    "handleTopDragLeaveCapture": [Function],
                                    "handleTopDragOver": [Function],
                                    "handleTopDragOverCapture": [Function],
                                    "handleTopDragStart": [Function],
                                    "handleTopDragStartCapture": [Function],
                                    "handleTopDrop": [Function],
                                    "handleTopDropCapture": [Function],
                                    "isNodeInDocument": [Function],
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "mouseMoveTimeoutTimer": null,
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "sourceNodeOptions": Map {},
                                    "sourceNodes": Map {},
                                    "sourcePreviewNodeOptions": Map {},
                                    "sourcePreviewNodes": Map {},
                                  },
                                  "context": Object {},
                                  "handleRefCountChange": [Function],
                                  "isSetUp": false,
                                  "monitor": DragDropMonitorImpl {
                                    "registry": HandlerRegistryImpl {
                                      "dragSources": Map {},
                                      "dropTargets": Map {},
                                      "pinnedSource": null,
                                      "pinnedSourceId": null,
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                      "types": Map {},
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  },
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(observable): [Function],
                                  },
                                }
                              }
                              estimatedRowSize={45}
                              height={0}
                              horizontalStrength={[Function]}
                              onScroll={[Function]}
                              onScrollChange={[Function]}
                              rowCount={12}
                              rowHeight={45}
                              rowRenderer={[Function]}
                              scrollToAlignment="start"
                              speed={30}
                              strengthMultiplier={30}
                              style={Object {}}
                              verticalStrength={[Function]}
                              width={0}
                            >
                              <List
                                autoHeight={false}
                                className="rst__virtualScrollOverride"
                                dragDropManager={
                                  DragDropManagerImpl {
                                    "backend": HTML5Backend {
                                      "actions": Object {
                                        "beginDrag": [Function],
                                        "drop": [Function],
                                        "endDrag": [Function],
                                        "hover": [Function],
                                        "publishDragSource": [Function],
                                      },
                                      "altKeyPressed": false,
                                      "asyncEndDragFrameId": null,
                                      "context": Object {},
                                      "currentDragSourceNode": null,
                                      "currentNativeHandle": null,
                                      "currentNativeSource": null,
                                      "dragEnterTargetIds": Array [],
                                      "dragOverTargetIds": null,
                                      "dragStartSourceIds": null,
                                      "dropTargetIds": Array [],
                                      "endDragIfSourceWasRemovedFromDOM": [Function],
                                      "endDragNativeItem": [Function],
                                      "enterLeaveCounter": EnterLeaveCounter {
                                        "entered": Array [],
                                        "isNodeInDocument": [Function],
                                      },
                                      "getSourceClientOffset": [Function],
                                      "handleSelectStart": [Function],
                                      "handleTopDragEndCapture": [Function],
                                      "handleTopDragEnter": [Function],
                                      "handleTopDragEnterCapture": [Function],
                                      "handleTopDragLeaveCapture": [Function],
                                      "handleTopDragOver": [Function],
                                      "handleTopDragOverCapture": [Function],
                                      "handleTopDragStart": [Function],
                                      "handleTopDragStartCapture": [Function],
                                      "handleTopDrop": [Function],
                                      "handleTopDropCapture": [Function],
                                      "isNodeInDocument": [Function],
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "mouseMoveTimeoutTimer": null,
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "sourceNodeOptions": Map {},
                                      "sourceNodes": Map {},
                                      "sourcePreviewNodeOptions": Map {},
                                      "sourcePreviewNodes": Map {},
                                    },
                                    "context": Object {},
                                    "handleRefCountChange": [Function],
                                    "isSetUp": false,
                                    "monitor": DragDropMonitorImpl {
                                      "registry": HandlerRegistryImpl {
                                        "dragSources": Map {},
                                        "dropTargets": Map {},
                                        "pinnedSource": null,
                                        "pinnedSourceId": null,
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                        "types": Map {},
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    },
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(observable): [Function],
                                    },
                                  }
                                }
                                estimatedRowSize={45}
                                height={0}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                rowCount={12}
                                rowHeight={45}
                                rowRenderer={[Function]}
                                scrollToAlignment="start"
                                scrollToIndex={-1}
                                speed={30}
                                style={Object {}}
                                width={0}
                              >
                                <Grid
                                  aria-label="grid"
                                  aria-readonly={true}
                                  autoContainerWidth={true}
                                  autoHeight={false}
                                  autoWidth={false}
                                  cellRangeRenderer={[Function]}
                                  cellRenderer={[Function]}
                                  className="ReactVirtualized__List rst__virtualScrollOverride"
                                  columnCount={1}
                                  columnWidth={0}
                                  containerRole="rowgroup"
                                  containerStyle={Object {}}
                                  dragDropManager={
                                    DragDropManagerImpl {
                                      "backend": HTML5Backend {
                                        "actions": Object {
                                          "beginDrag": [Function],
                                          "drop": [Function],
                                          "endDrag": [Function],
                                          "hover": [Function],
                                          "publishDragSource": [Function],
                                        },
                                        "altKeyPressed": false,
                                        "asyncEndDragFrameId": null,
                                        "context": Object {},
                                        "currentDragSourceNode": null,
                                        "currentNativeHandle": null,
                                        "currentNativeSource": null,
                                        "dragEnterTargetIds": Array [],
                                        "dragOverTargetIds": null,
                                        "dragStartSourceIds": null,
                                        "dropTargetIds": Array [],
                                        "endDragIfSourceWasRemovedFromDOM": [Function],
                                        "endDragNativeItem": [Function],
                                        "enterLeaveCounter": EnterLeaveCounter {
                                          "entered": Array [],
                                          "isNodeInDocument": [Function],
                                        },
                                        "getSourceClientOffset": [Function],
                                        "handleSelectStart": [Function],
                                        "handleTopDragEndCapture": [Function],
                                        "handleTopDragEnter": [Function],
                                        "handleTopDragEnterCapture": [Function],
                                        "handleTopDragLeaveCapture": [Function],
                                        "handleTopDragOver": [Function],
                                        "handleTopDragOverCapture": [Function],
                                        "handleTopDragStart": [Function],
                                        "handleTopDragStartCapture": [Function],
                                        "handleTopDrop": [Function],
                                        "handleTopDropCapture": [Function],
                                        "isNodeInDocument": [Function],
                                        "monitor": DragDropMonitorImpl {
                                          "registry": HandlerRegistryImpl {
                                            "dragSources": Map {},
                                            "dropTargets": Map {},
                                            "pinnedSource": null,
                                            "pinnedSourceId": null,
                                            "store": Object {
                                              "dispatch": [Function],
                                              "getState": [Function],
                                              "replaceReducer": [Function],
                                              "subscribe": [Function],
                                              Symbol(observable): [Function],
                                            },
                                            "types": Map {},
                                          },
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                        },
                                        "mouseMoveTimeoutTimer": null,
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "sourceNodeOptions": Map {},
                                        "sourceNodes": Map {},
                                        "sourcePreviewNodeOptions": Map {},
                                        "sourcePreviewNodes": Map {},
                                      },
                                      "context": Object {},
                                      "handleRefCountChange": [Function],
                                      "isSetUp": false,
                                      "monitor": DragDropMonitorImpl {
                                        "registry": HandlerRegistryImpl {
                                          "dragSources": Map {},
                                          "dropTargets": Map {},
                                          "pinnedSource": null,
                                          "pinnedSourceId": null,
                                          "store": Object {
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                            Symbol(observable): [Function],
                                          },
                                          "types": Map {},
                                        },
                                        "store": Object {
                                          "dispatch": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                          Symbol(observable): [Function],
                                        },
                                      },
                                      "store": Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      },
                                    }
                                  }
                                  estimatedColumnSize={100}
                                  estimatedRowSize={45}
                                  getScrollbarSize={[Function]}
                                  height={0}
                                  isScrollingOptOut={false}
                                  noContentRenderer={[Function]}
                                  noRowsRenderer={[Function]}
                                  onRowsRendered={[Function]}
                                  onScroll={[Function]}
                                  onScrollbarPresenceChange={[Function]}
                                  onSectionRendered={[Function]}
                                  overscanColumnCount={0}
                                  overscanIndicesGetter={[Function]}
                                  overscanRowCount={10}
                                  role="grid"
                                  rowCount={12}
                                  rowHeight={45}
                                  rowRenderer={[Function]}
                                  scrollToAlignment="start"
                                  scrollToColumn={-1}
                                  scrollToIndex={-1}
                                  scrollToRow={-1}
                                  scrollingResetTimeInterval={150}
                                  speed={30}
                                  style={Object {}}
                                  tabIndex={0}
                                  width={0}
                                >
                                  <div
                                    aria-label="grid"
                                    aria-readonly={true}
                                    className="ReactVirtualized__Grid ReactVirtualized__List rst__virtualScrollOverride"
                                    onScroll={[Function]}
                                    role="grid"
                                    style={
                                      Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "boxSizing": "border-box",
                                        "direction": "ltr",
                                        "height": 0,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "position": "relative",
                                        "width": 0,
                                        "willChange": "transform",
                                      }
                                    }
                                    tabIndex={0}
                                  />
                                </Grid>
                              </List>
                            </Scrolling(List)>
                          </div>
                        </AutoSizer>
                      </div>
                    </ReactSortableTree>
                  </SortableTreeWithoutDndContext>
                </DragDropContext(SortableTreeWithoutDndContext)>
              </StyledComponent>
            </Styled(DragDropContext(SortableTreeWithoutDndContext))>
          </div>
        </StyledComponent>
      </styled.div>
    </ThemeProvider>
  </Wrapper>
</Treeview>
`;

exports[`Test retrieval of Treeview props object 1`] = `
Object {
  "disabled": false,
  "err": null,
  "errorMessage": "",
  "height": "400px",
  "obj": "Treeview",
  "onChange": [Function],
  "sizing": "normal",
  "style": Object {},
  "testing": false,
  "treeData": Array [],
  "visible": true,
}
`;
