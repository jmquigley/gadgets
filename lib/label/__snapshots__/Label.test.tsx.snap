// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test a double click edit of the Label control 1`] = `
<Label
  bottom=""
  className=""
  contentEditable={false}
  controlled={true}
  direction="right"
  disabled={false}
  err={null}
  errorMessage=""
  focus={true}
  height=""
  id=""
  left=""
  location="none"
  noedit={false}
  nohover={false}
  noripple={false}
  notheme={false}
  obj="Label"
  onBlur={[Function]}
  onChange={[MockFunction]}
  onClick={[Function]}
  onDoubleClick={[MockFunction]}
  onKeyDown={[MockFunction]}
  onKeyPress={[MockFunction]}
  onUpdate={[MockFunction]}
  padding=""
  selected={false}
  sizing="normal"
  style={Object {}}
  testing={true}
  text="A"
  theme={null}
  tooltip=""
  top=""
  useedit={false}
  visible={true}
  width=""
  xcss={null}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={true}
    height=""
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Label"
    onBlur={[Function]}
    onChange={[MockFunction]}
    onClick={[Function]}
    onDoubleClick={[MockFunction]}
    onError={[Function]}
    onKeyDown={[MockFunction]}
    onKeyPress={[MockFunction]}
    onUpdate={[MockFunction]}
    padding=""
    reset={false}
    selected={false}
    sizing="normal"
    style={Object {}}
    testing={true}
    text="A"
    theme={null}
    tooltip=""
    top=""
    useedit={false}
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.span
        className="ui-label"
        contentEditable={false}
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDoubleClick={[Function]}
        onKeyDown={[Function]}
        onKeyPress={[Function]}
        sizing="normal"
        style={Object {}}
        suppressContentEditableWarning={true}
        visible={true}
      >
        <StyledComponent
          className="ui-label"
          contentEditable={false}
          disabled={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bwzfXH",
                "isStatic": false,
                "lastClassName": "cEurMc",
                "rules": Array [
                  "
	background-color: inherit;

	",
                  [Function],
                  "
	",
                  [Function],
                  "
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bwzfXH",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          onBlur={[Function]}
          onClick={[Function]}
          onDoubleClick={[Function]}
          onKeyDown={[Function]}
          onKeyPress={[Function]}
          sizing="normal"
          style={Object {}}
          suppressContentEditableWarning={true}
          visible={true}
        >
          <span
            className="ui-label sc-bwzfXH cEurMc"
            contentEditable={false}
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDoubleClick={[Function]}
            onKeyDown={[Function]}
            onKeyPress={[Function]}
            style={Object {}}
            suppressContentEditableWarning={true}
          >
            A
          </span>
        </StyledComponent>
      </styled.span>
    </ThemeProvider>
  </Wrapper>
</Label>
`;

exports[`Test creation of a Label control 1`] = `
<Wrapper
  bottom=""
  className="test-class"
  contentEditable={false}
  controlled={true}
  direction="right"
  disabled={false}
  err={null}
  errorMessage=""
  focus={false}
  height=""
  id=""
  left=""
  location="none"
  noedit={false}
  nohover={false}
  noripple={false}
  notheme={false}
  obj="Label"
  onBlur={[Function]}
  onChange={[Function]}
  onClick={[Function]}
  onDoubleClick={[Function]}
  onError={[Function]}
  onKeyDown={[Function]}
  onKeyPress={[Function]}
  onUpdate={[Function]}
  padding=""
  reset={false}
  selected={false}
  sizing="normal"
  style={Object {}}
  testing={true}
  text="Test label text"
  theme={null}
  tooltip=""
  top=""
  useedit={false}
  visible={true}
  width=""
  xcss={null}
>
  <styled.span
    className="ui-label test-class"
    contentEditable={false}
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onDoubleClick={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    sizing="normal"
    style={Object {}}
    suppressContentEditableWarning={true}
    visible={true}
  >
    Test label text
  </styled.span>
</Wrapper>
`;

exports[`Test double click change to Label and blur to save 1`] = `
<Label
  bottom=""
  className=""
  contentEditable={false}
  controlled={true}
  direction="right"
  disabled={false}
  err={null}
  errorMessage=""
  focus={true}
  height=""
  id=""
  left=""
  location="none"
  noedit={false}
  nohover={false}
  noripple={false}
  notheme={false}
  obj="Label"
  onBlur={[MockFunction]}
  onChange={[MockFunction]}
  onClick={[Function]}
  onDoubleClick={[MockFunction]}
  onKeyDown={[Function]}
  onKeyPress={[Function]}
  onUpdate={[MockFunction]}
  padding=""
  selected={false}
  sizing="normal"
  style={Object {}}
  testing={true}
  text="A"
  theme={null}
  tooltip=""
  top=""
  useedit={false}
  visible={true}
  width=""
  xcss={null}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={true}
    height=""
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Label"
    onBlur={[MockFunction]}
    onChange={[MockFunction]}
    onClick={[Function]}
    onDoubleClick={[MockFunction]}
    onError={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    onUpdate={[MockFunction]}
    padding=""
    reset={false}
    selected={false}
    sizing="normal"
    style={Object {}}
    testing={true}
    text="A"
    theme={null}
    tooltip=""
    top=""
    useedit={false}
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.span
        className="ui-label"
        contentEditable={false}
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDoubleClick={[Function]}
        onKeyDown={[Function]}
        onKeyPress={[Function]}
        sizing="normal"
        style={Object {}}
        suppressContentEditableWarning={true}
        visible={true}
      >
        <StyledComponent
          className="ui-label"
          contentEditable={false}
          disabled={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bwzfXH",
                "isStatic": false,
                "lastClassName": "cEurMc",
                "rules": Array [
                  "
	background-color: inherit;

	",
                  [Function],
                  "
	",
                  [Function],
                  "
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bwzfXH",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          onBlur={[Function]}
          onClick={[Function]}
          onDoubleClick={[Function]}
          onKeyDown={[Function]}
          onKeyPress={[Function]}
          sizing="normal"
          style={Object {}}
          suppressContentEditableWarning={true}
          visible={true}
        >
          <span
            className="ui-label sc-bwzfXH cEurMc"
            contentEditable={false}
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDoubleClick={[Function]}
            onKeyDown={[Function]}
            onKeyPress={[Function]}
            style={Object {}}
            suppressContentEditableWarning={true}
          >
            A
          </span>
        </StyledComponent>
      </styled.span>
    </ThemeProvider>
  </Wrapper>
</Label>
`;

exports[`Test making the Label control invisible 1`] = `
<Label
  bottom=""
  className=""
  contentEditable={false}
  controlled={true}
  direction="right"
  disabled={false}
  err={null}
  errorMessage=""
  focus={false}
  height=""
  id=""
  left=""
  location="none"
  noedit={false}
  nohover={false}
  noripple={false}
  notheme={false}
  obj="Label"
  onBlur={[Function]}
  onChange={[Function]}
  onClick={[Function]}
  onDoubleClick={[Function]}
  onKeyDown={[Function]}
  onKeyPress={[Function]}
  onUpdate={[Function]}
  padding=""
  selected={false}
  sizing="normal"
  style={Object {}}
  testing={true}
  text="Test label text"
  theme={null}
  tooltip=""
  top=""
  useedit={false}
  visible={false}
  width=""
  xcss={null}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={false}
    err={null}
    errorMessage=""
    focus={false}
    height=""
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Label"
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onDoubleClick={[Function]}
    onError={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    onUpdate={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="normal"
    style={Object {}}
    testing={true}
    text="Test label text"
    theme={null}
    tooltip=""
    top=""
    useedit={false}
    visible={false}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.span
        className="ui-label"
        contentEditable={false}
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDoubleClick={[Function]}
        onKeyDown={[Function]}
        onKeyPress={[Function]}
        sizing="normal"
        style={Object {}}
        suppressContentEditableWarning={true}
        visible={false}
      >
        <StyledComponent
          className="ui-label"
          contentEditable={false}
          disabled={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bwzfXH",
                "isStatic": false,
                "lastClassName": "feyPXN",
                "rules": Array [
                  "
	background-color: inherit;

	",
                  [Function],
                  "
	",
                  [Function],
                  "
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bwzfXH",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          onBlur={[Function]}
          onClick={[Function]}
          onDoubleClick={[Function]}
          onKeyDown={[Function]}
          onKeyPress={[Function]}
          sizing="normal"
          style={Object {}}
          suppressContentEditableWarning={true}
          visible={false}
        >
          <span
            className="ui-label sc-bwzfXH feyPXN"
            contentEditable={false}
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDoubleClick={[Function]}
            onKeyDown={[Function]}
            onKeyPress={[Function]}
            style={Object {}}
            suppressContentEditableWarning={true}
          >
            Test label text
          </span>
        </StyledComponent>
      </styled.span>
    </ThemeProvider>
  </Wrapper>
</Label>
`;

exports[`Test retrieval of default Label props object 1`] = `
Object {
  "bottom": "",
  "children": null,
  "className": "",
  "contentEditable": false,
  "controlled": true,
  "direction": "right",
  "disabled": false,
  "err": null,
  "errorMessage": "",
  "focus": false,
  "height": "",
  "id": "",
  "left": "",
  "location": "none",
  "noedit": false,
  "nohover": false,
  "noripple": false,
  "notheme": false,
  "obj": "Label",
  "onBlur": [Function],
  "onChange": [Function],
  "onClick": [Function],
  "onDoubleClick": [Function],
  "onKeyDown": [Function],
  "onKeyPress": [Function],
  "onUpdate": [Function],
  "padding": "",
  "selected": false,
  "sizing": "normal",
  "style": Object {},
  "testing": true,
  "text": "​",
  "theme": null,
  "tooltip": "",
  "top": "",
  "useedit": false,
  "visible": true,
  "width": "",
  "xcss": null,
}
`;

exports[`Test the disabling of the Label control 1`] = `
<Label
  bottom=""
  className=""
  contentEditable={false}
  controlled={true}
  direction="right"
  disabled={true}
  err={null}
  errorMessage=""
  focus={false}
  height=""
  id=""
  left=""
  location="none"
  noedit={false}
  nohover={false}
  noripple={false}
  notheme={false}
  obj="Label"
  onBlur={[Function]}
  onChange={[Function]}
  onClick={[Function]}
  onDoubleClick={[Function]}
  onKeyDown={[Function]}
  onKeyPress={[Function]}
  onUpdate={[Function]}
  padding=""
  selected={false}
  sizing="normal"
  style={Object {}}
  testing={true}
  text="Test label text"
  theme={null}
  tooltip=""
  top=""
  useedit={false}
  visible={true}
  width=""
  xcss={null}
>
  <Wrapper
    bottom=""
    className=""
    contentEditable={false}
    controlled={true}
    direction="right"
    disabled={true}
    err={null}
    errorMessage=""
    focus={false}
    height=""
    id=""
    left=""
    location="none"
    noedit={false}
    nohover={false}
    noripple={false}
    notheme={false}
    obj="Label"
    onBlur={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onDoubleClick={[Function]}
    onError={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    onUpdate={[Function]}
    padding=""
    reset={false}
    selected={false}
    sizing="normal"
    style={Object {}}
    testing={true}
    text="Test label text"
    theme={null}
    tooltip=""
    top=""
    useedit={false}
    visible={true}
    width=""
    xcss={null}
  >
    <ThemeProvider
      theme={
        Object {
          "backgroundColor": "#ffffff",
          "borderColor": "#c0c0c0",
          "color": "#000000",
          "headerBackgroundColor": "#004358",
          "headerForegroundColor": "#ffffff",
          "headerHoverColor": "#ffe11a",
          "hoverColor": "#c0c0c0",
          "inputBorderColor": "#c0c0c0",
          "itemHoverColor": "#bedb39",
          "selectedBackgroundColor": "#1f8a70",
          "selectedForegroundColor": "#ffe11a",
          "titleBarBackgroundColor": "#004358",
          "titleBarForegroundColor": "#ffe11a",
          "tooltipBackgroundColor": "#708090",
          "tooltipForegroundColor": "#ffffff",
          "transitionDelay": "0.5s",
        }
      }
    >
      <styled.span
        className="ui-label"
        contentEditable={false}
        disabled={true}
        onBlur={[Function]}
        onClick={[Function]}
        onDoubleClick={[Function]}
        onKeyDown={[Function]}
        onKeyPress={[Function]}
        sizing="normal"
        style={Object {}}
        suppressContentEditableWarning={true}
        visible={true}
      >
        <StyledComponent
          className="ui-label"
          contentEditable={false}
          disabled={true}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bwzfXH",
                "isStatic": false,
                "lastClassName": "gfZwc",
                "rules": Array [
                  "
	background-color: inherit;

	",
                  [Function],
                  "
	",
                  [Function],
                  "
	",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bwzfXH",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          onBlur={[Function]}
          onClick={[Function]}
          onDoubleClick={[Function]}
          onKeyDown={[Function]}
          onKeyPress={[Function]}
          sizing="normal"
          style={Object {}}
          suppressContentEditableWarning={true}
          visible={true}
        >
          <span
            className="ui-label sc-bwzfXH gfZwc"
            contentEditable={false}
            disabled={true}
            onBlur={[Function]}
            onClick={[Function]}
            onDoubleClick={[Function]}
            onKeyDown={[Function]}
            onKeyPress={[Function]}
            style={Object {}}
            suppressContentEditableWarning={true}
          >
            Test label text
          </span>
        </StyledComponent>
      </styled.span>
    </ThemeProvider>
  </Wrapper>
</Label>
`;
